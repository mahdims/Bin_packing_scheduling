#!/bin/bash
###############################################################################
# This script is the command that is executed every run.
# Check the examples in examples/
#
# This script is run in the execution directory (execDir, --exec-dir).
#
# PARAMETERS:
# $1 is the candidate configuration number
# $2 is the instance ID
# $3 is the seed
# $4 is the instance name
# The rest ($* after `shift 4') are parameters to the run
#
# RETURN VALUE:
# This script should print one numerical value: the cost that must be minimized.
# Exit with 0 if no error, with 1 in case of error
###########main####################################################################

error() {
    echo "`TZ=UTC date`: $0: error: $@"
    exit 1
}

EXE=./main.py


CONFIG_ID=$1
INSTANCE_ID=$2
SEED=$3
INSTANCE=$4

shift 4 || exit 1
CONFIG_PARAMS=$*

LOGS=c${CONFIG_ID}-${INSTANCE_ID}.log
DAT_FILE=c${CONFIG_ID}-${INSTANCE_ID}.dat
STDERR=c${CONFIG_ID}-${INSTANCE_ID}-${SEED}.stderr

touch ${DAT_FILE}

# If the program just prints a number, we can use 'exec' to avoid
# creating another process, but there can be no other commands after exec.
#exec $EXE ${FIXED_PARAMS} -i $INSTANCE ${CONFIG_PARAMS}
# exit 1
# 
# Otherwise, save the output to a file, and parse the result from it.
# (If you wish to ignore segmentation faults you can use '{}' around
# the command.)
#python -m scoop $EXE -v ${CONFIG_PARAMS} --datfile ${DAT_FILE} > ${LOGS} 2>&1
#echo $EXE $*
#python $EXE -v ${CONFIG_PARAMS}
python3 $EXE ${CONFIG_PARAMS} --datfile ${DAT_FILE} 1> ${LOGS} 2> ${STDERR}



# This is an example of reading a number from the output.
# It assumes that the objective value is the first number in
# the first column of the last line of the output.
if [ -s "${DAT_FILE}" ]; then
	COST=$(cat "${DAT_FILE}" | grep -e '^[0-9]' | cut -f1)
	# use echo "-$COST" to
	# Negative because score is maximised but irace minimises.
    echo "-$COST"
    rm -f "${LOGS}" "${DAT_FILE}" 
    exit 0
else
    error "${DAT_FILE}: No such file or directory"
fi
